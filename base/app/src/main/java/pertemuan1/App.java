/*
 * This source file was generated by the Gradle 'init' task
 */
package pertemuan1;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import pertemuan1.database.Database;
import pertemuan1.repository.*;
import pertemuan1.models.*;

public class App {
    public JurusanRepository jurusanRepository = new JurusanRepository();
    public MahasiswaRepository mahasiswaRepository = new MahasiswaRepository(jurusanRepository);
    public MatakuliahRepository matakuliahRepository = new MatakuliahRepository(jurusanRepository);
    public static final Scanner scanner = new Scanner(System.in);
    public static List<String> listIndexNilai = Arrays.asList("A", "A-", "B+", "B", "B-", "C+", "C", "D", "E");
    public static Map<String, Double> indexNilaiValue = Map.of(
            "A", 4.0,
            "A-", 3.7,
            "B+", 3.3,
            "B", 3.0,
            "B-", 2.7,
            "C+", 2.3,
            "C", 2.0,
            "D", 1.0,
            "E", 0.0);

    public static int readInt() {
        while (!scanner.hasNextInt()) {
            System.out.println("Input tidak valid. Silakan masukkan angka.");
            scanner.next();
        }
        int result = scanner.nextInt();
        scanner.nextLine();
        return result;
    }

    public static String readLine() {
        String result = scanner.nextLine();
        return result;
    }

    public static boolean konfirmasi(String text) {
        System.out.println(text + " (Y/N)");
        String konfirmasi = readLine();
        return konfirmasi.toLowerCase().equals("y");
    }

    public static void displayAllJurusan(JurusanRepository jurusanRepository) {
        List<Jurusan> listJurusan = jurusanRepository.findAll();
        int counter = 1;
        for (Jurusan jurusan : listJurusan) {
            System.out.println(counter + ". " + jurusan.getKode() + " - " + jurusan.getNama());
            counter++;
        }
    }

    public static void addJurusan(JurusanRepository jurusanRepository) {
        System.out.println("Masukkan kode jurusan: ");
        String kode = readLine();
        System.out.println("Masukkan nama jurusan:");
        String nama = readLine();

        Jurusan jurusan = new Jurusan();
        jurusan.setKode(kode);
        jurusan.setNama(nama);
        var konfirm = konfirmasi("Konfirm tambah jurusan? " + jurusan.getNama());
        if (konfirm) {
            jurusanRepository.insert(jurusan);
            System.out.println("Jurusan berhasil ditambahkan");
        }
    }

    public static void editJurusan(JurusanRepository jurusanRepository) {
        System.out.println("Enter kode of the Jurusan you want to edit: ");
        String kode = readLine();
        Jurusan tempJurusan = jurusanRepository.findByKode(kode);
        if (tempJurusan == null) {
            System.out.println("Jurusan with kode " + kode + "doesn't exist");
        }
        System.out.println("Enter nama jurusan baru: ");
        String nama = readLine();
        tempJurusan = new Jurusan();
        tempJurusan.setKode(kode);
        tempJurusan.setNama(nama);
        var konfirm = konfirmasi("Konfirm edit jurusan? " + tempJurusan.getKode());
        if (konfirm) {
            jurusanRepository.update(tempJurusan)
            System.out.println("Jurusan berhasil diedit");
        }
    }

    public static void deleteJurusan(JurusanRepository jurusanRepository) {
        System.out.println("Masukkan kode jurusan: ");
        String kode = readLine();
        Jurusan tempJurusan = jurusanRepository.findByKode(kode)
        if (tempJurusan == null) {
            System.out.println("Jurusan tidak ditemukan");
            break;
        }
        boolean konfirm = konfirmasi("Konfirm hapus jurusan? kode: " + tempJurusan.getKode() + ", nama: " + tempJurusan.getNama());
        if (konfirm) {
            jurusanRepository.delete(kode)
            System.out.println("Jurusan berhasil dihapus");
        }
    }

    public static void handleMenuJurusan(JurusanRepository jurusanRepository) {
        printMenuJurusan();
        int input = readInt();
        while (input != 0) {
            switch (input) {
                case 1 -> {
                    displayAllJurusan(jurusanRepository);
                    break;
                }
                case 2 -> {
                    addJurusan(jurusanRepository);
                    break;
                }
                case 3 -> {
                    editJurusan(jurusanRepository);
                    break;
                }
                case 4 -> {
                    deleteJurusan(jurusanRepository);
                    break;
                }
                default -> {
                    break;
                }
            }
            printMenuJurusan();
            input = readInt();
        }
    }

    public static void printMenuJurusan() {
        System.out.println("");
        System.out.println("Menu jurusan:");
        System.out.println("1. Lihat daftar jurusan");
        System.out.println("2. Tambah jurusan");
        System.out.println("3. Edit jurusan");
        System.out.println("4. Hapus jurusan");
        System.out.println("0. Keluar");
    }

    public static void handleMenuMataKuliah() {
        System.out.println("Masukkan kode jurusan: ");
        String kode = readLine();
        int index = getIndexJurusanByKode(kode);
        if (index == -1) {
            System.out.println("Jurusan tidak ditemukan");
            return;
        }
        Jurusan jurusan = listJurusan.get(index);
        System.out.println(getLabelJurusan(jurusan));
        printMenuMataKuliah();
        int input = readInt();
        while (input != 0) {
            switch (input) {
                case 1 -> {
                    for (int i = 0; i < jurusan.listMataKuliah.size(); i++) {
                        System.out.println(getLabelMataKuliah(jurusan.listMataKuliah.get(i)));
                    }
                    break;
                }
                case 2 -> {
                    MataKuliah mataKuliah = new MataKuliah();
                    System.out.println("Masukkan kode mata kuliah: ");
                    mataKuliah.kode = readLine();
                    System.out.println("Masukkan nama mata kuliah: ");
                    mataKuliah.nama = readLine();
                    System.out.println("Masukkan jumlah sks: ");
                    mataKuliah.sks = readInt();
                    var konfirm = konfirmasi("Konfirm tambah mata kuliah? " + getLabelMataKuliah(mataKuliah));
                    if (konfirm) {
                        jurusan.listMataKuliah.add(mataKuliah);
                        System.out.println("Mata kuliah berhasil ditambahkan");
                    }
                    break;
                }
                case 3 -> {
                    System.out.println("Masukkan kode mata kuliah: ");
                    String kodeMataKuliah = readLine();
                    int indexMataKuliah = getIndexMataKuliahByKodeDanJurusan(kodeMataKuliah, jurusan);
                    if (indexMataKuliah == -1) {
                        System.out.println("Mata kuliah tidak ditemukan");
                        break;
                    }
                    MataKuliah tempMataKuliah = new MataKuliah();
                    tempMataKuliah.kode = kodeMataKuliah;
                    System.out.println("Masukkan nama mata kuliah: ");
                    tempMataKuliah.nama = readLine();
                    System.out.println("Masukkan jumlah sks: ");
                    tempMataKuliah.sks = readInt();
                    var konfirm = konfirmasi("Konfirm edit mata kuliah? " + getLabelMataKuliah(tempMataKuliah));
                    if (konfirm) {
                        System.out.println("Mata kuliah berhasil diedit");
                        MataKuliah mataKuliah = jurusan.listMataKuliah.get(indexMataKuliah);
                        mataKuliah.nama = tempMataKuliah.nama;
                        mataKuliah.sks = tempMataKuliah.sks;
                    }
                    break;
                }
                case 4 -> {
                    System.out.println("Masukkan kode mata kuliah: ");
                    String kodeMataKuliah = readLine();
                    int indexMataKuliah = getIndexMataKuliahByKodeDanJurusan(kodeMataKuliah, jurusan);
                    if (indexMataKuliah == -1) {
                        System.out.println("Mata kuliah tidak ditemukan");
                        break;
                    }
                    MataKuliah mataKuliah = jurusan.listMataKuliah.get(indexMataKuliah);
                    boolean konfirm = konfirmasi("Konfirm hapus mata kuliah? " + getLabelMataKuliah(mataKuliah));
                    if (konfirm) {
                        jurusan.listMataKuliah.remove(mataKuliah);
                        System.out.println("Mata kuliah berhasil dihapus");
                    }
                    break;
                }
                default -> {
                    break;
                }
            }
            printMenuMataKuliah();
            input = readInt();
        }
    }

    public static void printMenuMataKuliah() {
        System.out.println("");
        System.out.println("Menu mata kuliah:");
        System.out.println("1. List mata kuliah");
        System.out.println("2. Buat mata kuliah baru");
        System.out.println("3. Edit mata kuliah");
        System.out.println("4. Hapus mata kuliah");
        System.out.println("0. Keluar");
    }

    public static void handleMenuMahasiswa() {
        printMenuMahasiswa();
        int input = readInt();
        while (input != 0) {
            switch (input) {
                case 1 -> {
                    for (int i = 0; i < listMahasiswa.size(); i++) {
                        Mahasiswa mahasiswa = listMahasiswa.get(i);
                        System.out.println(getLabelMahasiswa(mahasiswa));
                    }
                    break;
                }
                case 2 -> {
                    Mahasiswa mahasiswa = new Mahasiswa();
                    System.out.println("Masukkan nim: ");
                    mahasiswa.nim = readLine();
                    System.out.println("Masukkan nama: ");
                    mahasiswa.nama = readLine();
                    System.out.println("Masukkan kode jurusan: ");
                    String kodeJurusan = readLine();
                    int indexJurusan = getIndexJurusanByKode(kodeJurusan);
                    if (indexJurusan == -1) {
                        System.out.println("Jurusan tidak ditemukan");
                        break;
                    }
                    mahasiswa.jurusan = listJurusan.get(indexJurusan);
                    var konfirm = konfirmasi("Konfirm tambah mahasiswa? " + getLabelMahasiswa(mahasiswa));
                    if (konfirm) {
                        listMahasiswa.add(mahasiswa);
                        System.out.println("Mahasiswa berhasil ditambahkan");
                    }
                    break;
                }
                case 3 -> {
                    System.out.println("Masukkan nim: ");
                    String nim = readLine();
                    int indexMahasiswa = getIndexMahasiswaByNim(nim);
                    if (indexMahasiswa == -1) {
                        System.out.println("Mahasiswa tidak ditemukan");
                        break;
                    }
                    Mahasiswa tempMahasiswa = new Mahasiswa();
                    tempMahasiswa.nim = nim;
                    System.out.println("Masukkan nama: ");
                    tempMahasiswa.nama = readLine();
                    System.out.println("Masukkan kode jurusan: ");
                    String kodeJurusan = readLine();
                    int indexJurusan = getIndexJurusanByKode(kodeJurusan);
                    if (indexJurusan == -1) {
                        System.out.println("Jurusan tidak ditemukan");
                        break;
                    }
                    tempMahasiswa.jurusan = listJurusan.get(indexJurusan);
                    var konfirm = konfirmasi("Konfirm edit mahasiswa? " + getLabelMahasiswa(tempMahasiswa));
                    if (konfirm) {
                        System.out.println("Mahasiswa berhasil diedit");
                        Mahasiswa mahasiswa = listMahasiswa.get(indexMahasiswa);
                        mahasiswa.nama = tempMahasiswa.nama;
                        mahasiswa.jurusan = tempMahasiswa.jurusan;
                    }
                    break;
                }
                case 4 -> {
                    System.out.println("Masukkan nim: ");
                    String nim = readLine();
                    int indexMahasiswa = getIndexMahasiswaByNim(nim);
                    if (indexMahasiswa == -1) {
                        System.out.println("Mahasiswa tidak ditemukan");
                        break;
                    }
                    Mahasiswa mahasiswa = listMahasiswa.get(indexMahasiswa);
                    boolean konfirm = konfirmasi("Konfirm hapus mahasiswa? " + getLabelMahasiswa(mahasiswa));
                    if (konfirm) {
                        listMahasiswa.remove(mahasiswa);
                        System.out.println("Mahasiswa berhasil dihapus");
                    }
                    break;
                }
                case 5 -> {
                    System.out.println("Masukkan nim: ");
                    String nim = readLine();
                    int indexMahasiswa = getIndexMahasiswaByNim(nim);
                    if (indexMahasiswa == -1) {
                        System.out.println("Mahasiswa tidak ditemukan");
                        break;
                    }
                    Mahasiswa mahasiswa = listMahasiswa.get(indexMahasiswa);
                    System.out.println("Masukkan kode mata kuliah: ");
                    String kodeMataKuliah = readLine();
                    int indexMataKuliah = getIndexMataKuliahByKodeDanJurusan(kodeMataKuliah, mahasiswa.jurusan);
                    if (indexMataKuliah == -1) {
                        System.out.println("Mata kuliah tidak ditemukan");
                        break;
                    }
                    MataKuliah mataKuliah = mahasiswa.jurusan.listMataKuliah.get(indexMataKuliah);
                    System.out.println("Masukkan nilai: ");
                    String nilai = readLine().toUpperCase();
                    boolean isValidNilai = isValidNilaiValue(nilai);
                    if (!isValidNilai) {
                        System.out.println("Nilai tidak valid");
                        break;
                    }
                    mahasiswa.indeksNilai.put(mataKuliah, nilai);
                    System.out.println("Nilai berhasil ditambahkan");
                    break;
                }
                case 6 -> {
                    System.out.println("Masukkan nim: ");
                    String nim = readLine();
                    int indexMahasiswa = getIndexMahasiswaByNim(nim);
                    if (indexMahasiswa == -1) {
                        System.out.println("Mahasiswa tidak ditemukan");
                        break;
                    }
                    Mahasiswa mahasiswa = listMahasiswa.get(indexMahasiswa);
                    double totalNilai = 0;
                    int totalSks = 0;
                    for (Map.Entry<MataKuliah, String> entry : mahasiswa.indeksNilai.entrySet()) {
                        MataKuliah mataKuliah = entry.getKey();
                        String nilai = entry.getValue();
                        double nilaiValue = indexNilaiValue.get(nilai);
                        totalSks = totalSks + mataKuliah.sks;
                        totalNilai = totalNilai + nilaiValue * mataKuliah.sks;
                    }
                    double ipk = totalSks > 0 ? totalNilai / totalSks : 0;
                    System.out.println("IPK: " + ipk);
                    break;
                }
                default -> {
                    break;
                }
            }
            printMenuMahasiswa();
            input = readInt();
        }
    }

    public static void printMenuMahasiswa() {
        System.out.println("");
        System.out.println("Menu mahasiswa:");
        System.out.println("1. Lihat daftar mahasiswa");
        System.out.println("2. Tambah mahasiswa");
        System.out.println("3. Edit mahasiswa");
        System.out.println("4. Hapus mahasiswa");
        System.out.println("5. Beri nilai mahasiswa");
        System.out.println("6. Hitung IPK Mahasiswa");
        System.out.println("0. Keluar");
    }

    public static void printMenuUtama() {
        System.out.println("");
        System.out.println("Menu utama: ");
        System.out.println("1. Menu jurusan");
        System.out.println("2. Menu mata kuliah");
        System.out.println("3. Menu mahasiswa");
        System.out.println("0. Keluar ");
    }

    public void run() {
        Connection conn = Database.connect();
        printMenuUtama();
        int input = readInt();
        while (input != 0) {
            switch (input) {
                case 1 -> {
                    handleMenuJurusan(this.jurusanRepository);
                    break;
                }
                case 2 -> {
                    handleMenuMataKuliah();
                    break;
                }
                case 3 -> {
                    handleMenuMahasiswa();
                    break;
                }
                default -> {
                    break;
                }
            }
            printMenuUtama();
            input = readInt();
        }
    }

    public static void main(String[] args) {
        App miniSIAApp = new App();
        miniSIAApp.run();
    }
}
